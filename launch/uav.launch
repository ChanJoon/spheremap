<launch>

  <arg name="UAV_NAME" default="$(optenv UAV_NAME uav)" />
  <arg name="robot_name" default="$(optenv UAV_NAME uav)"/>
  <arg name="robots" default="uav3,uav2,uav1,TEAMBASE" />
  <arg name="use_staging_area_wall" default="true" />

  <!-- print used commit -->
  <!-- <arg name="package_name" default="spheremap_server" /> -->
  <!-- <group ns="$(arg UAV_NAME)"> -->
  <!--   <node name="$(arg package_name)_commit" pkg="subt_virtual_launch" type="print_commit.sh" args="$(arg package_name)" output="screen"/> -->
  <!-- </group> -->

  <arg name="config_name" default="params.yaml"/>
  <arg name="name" default="" />
  <arg name="portname" default="/dev/ultrasonic" />
  <arg name="profiler" default="$(optenv PROFILER false)" />

  <arg name="baselink_frame" default="$(arg UAV_NAME)/fcu"/>
  <arg name="map_frame" default="$(arg UAV_NAME)/stable_origin"/>
  <!-- <arg name="map_frame" default=""/> -->
  <arg name="swap_garmins" default="$(optenv SWAP_GARMINS false)" />

    <!-- will it run using GNU debugger? -->
  <arg name="DEBUG" default="false" />
  <arg unless="$(arg DEBUG)" name="launch_prefix_debug" value=""/>
  <arg     if="$(arg DEBUG)" name="launch_prefix_debug" value="debug_roslaunch"/>

    <!-- will it run as standalone nodelet or using a nodelet manager? -->
  <arg name="standalone" default="true" />
  <arg name="manager" default="$(arg UAV_NAME)_rssi_manager" />
  <arg name="n_threads" default="8" />
  <arg unless="$(arg standalone)" name="nodelet" value="load"/>
  <arg     if="$(arg standalone)" name="nodelet" value="standalone"/>
  <arg unless="$(arg standalone)" name="nodelet_manager" value="$(arg manager)"/>
  <arg     if="$(arg standalone)" name="nodelet_manager" value=""/>

    <!-- loading configs specific for each uav_name -->
  <arg name="uav_config_file" value="$(find spheremap_server)/config/$(arg UAV_NAME).yaml" />

  <group ns="$(arg UAV_NAME)">

    <!-- launch the nodelet -->
    <node pkg="nodelet" type="nodelet" name="spheremap_server_mapper" args="$(arg nodelet) spheremap_server/MappingNodelet $(arg nodelet_manager)" launch-prefix="$(arg launch_prefix_debug)" output="screen">
    <!-- <node pkg="nodelet" type="nodelet" name="spheremap_server_mapper" args="$(arg nodelet) spheremap_server/PlanningNodelet $(arg nodelet_manager)" launch-prefix="" output="screen"> -->
    <!-- <node pkg="nodelet" type="nodelet" name="spheremap_server_mapper" args="$(arg nodelet) spheremap_server/PlanningNodelet $(arg nodelet_manager)" launch-prefix="debug_roslaunch" output="screen"> -->

      <rosparam file="$(find spheremap_server)/config/$(arg config_name)" />

      <param name="uav_name" type="string" value="$(arg UAV_NAME)" />
      <param name="map_frame" type="string" value="$(arg map_frame)"/>

      <param name="robot_name" value="$(arg robot_name)" />
      <param name="robots" value="$(arg robots)"/>
      <!-- <param name="robot_name_list" type="yaml" value="$(eval robots.encode('utf-8').split(','))"/> -->
      <param name="use_staging_area_wall" value="$(arg use_staging_area_wall)" />
      <param name="baselink_frame" type="string" value="$(arg baselink_frame)" />

        <!-- Publishers -->
      <remap from="~frontier_clusters" to="spheremap_server_vis/frontier_clusters" />

      <remap from="~facetmap_detailed" to="spheremap_server_vis/facetmap/detailed" />
      <remap from="~facetmap_pointcloud" to="spheremap_server_vis/facetmap/pointcloud" />

      <remap from="~spheremap_spheres" to="spheremap_server_vis/spheremap/spheres" />
      <remap from="~spheremap_graph" to="spheremap_server_vis/spheremap/graph" />
      <remap from="~spheremap_topology" to="spheremap_server_vis/spheremap/topology" />
      <remap from="~spheremap_navigation" to="spheremap_server_vis/spheremap/navigation" />
      <remap from="~spheremap_debug" to="spheremap_server_vis/spheremap/debug" />

      <remap from="~potential_goals_local" to="spheremap_server_vis/planning/potential_goals_local" />
      <remap from="~potential_goals_global" to="spheremap_server_vis/planning/potential_goals_global" />

      <remap from="~sent_segmap_visualization" to="spheremap_server_vis/cooperation/sent_segmap_visualization" />
      <remap from="~received_topology_data" to="spheremap_server_vis/cooperation/received_topology_data" />
      <remap from="~received_robot_state_data" to="spheremap_server_vis/cooperation/received_robot_state_data" />
      <remap from="~received_operator_commands_markers" to="spheremap_server_vis/cooperation/received_operator_commands_markers" />

        <!-- Subscribers -->
      <remap from="~control_manager_diag_in" to="/$(arg UAV_NAME)/control_manager/diagnostics" />
      <!-- <remap from="~odom_uav_in" to="/$(arg UAV_NAME)/aloam/odom" /> -->
      <!-- <remap from="~odom_uav_in" to="/$(arg UAV_NAME)/liosam/mapping/odometry" /> -->
      <remap from="~odom_uav_in" to="/$(arg UAV_NAME)/odometry/odom_main" />
      <remap from="~odom_uav_in_tracker" to="/$(arg UAV_NAME)/control_manager/cmd_odom" />
      <remap from="~octomap_binary_in" to="/$(arg UAV_NAME)/octomap_server/octomap_global_binary" />
      <!-- <remap from="~octomap_binary_const_ptr_in" to="/$(arg UAV_NAME)/octomap_server/octomap_local_binary" /> -->
      <remap from="~future_trajectory" to="/$(arg UAV_NAME)/control_manager/mpc_tracker/predicted_trajectory_debugging" />
      <remap from="~battery_state_in" to="/$(arg UAV_NAME)/battery_state" />
      <remap from="~control_error_in" to="/$(arg UAV_NAME)/control_manager/control_error" />

        <!-- Services -->
      <remap from="~planning_init" to="/$(arg UAV_NAME)/spheremap_server/planning_init" />
      <remap from="~automatic_exploration" to="/$(arg UAV_NAME)/spheremap_server/start_exploration" />
      <remap from="~set_narrow_parameters" to="/$(arg UAV_NAME)/spheremap_server/set_narrow_params" />
      <remap from="~set_preferred_flight_angle_in" to="/$(arg UAV_NAME)/spheremap_server/set_preferred_flight_angle" />
      <remap from="~set_desired_velocity_in" to="/$(arg UAV_NAME)/spheremap_server/set_desired_velocity" />
      <remap from="~stop_trajectory_following" to="/$(arg UAV_NAME)/control_manager/stop_trajectory_tracking" />

      <remap from="~srv_graph_insert_comm_node_in" to="/$(arg UAV_NAME)/spheremap_server/graph/insert_comm_node" />
      <remap from="~srv_graph_insert_comm_nodes_in" to="/$(arg UAV_NAME)/spheremap_server/graph/insert_comm_nodes" />
      <remap from="~srv_graph_invalidate_comm_node_in" to="/$(arg UAV_NAME)/spheremap_server/graph/invalidate_comm_node" />

    </node>

  </group>

</launch>
